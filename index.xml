<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>さぶろぐ!</title>
    <link>https://sublog.zinntikumugai.com/</link>
    <description>Recent content on さぶろぐ!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 03 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sublog.zinntikumugai.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>さぶのブログを作りました</title>
      <link>https://sublog.zinntikumugai.com/post/2020/03/newblog/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sublog.zinntikumugai.com/post/2020/03/newblog/</guid>
      <description>サブブログを作ってみました 以前から気になっていた、静的サイトジェネレーターのHUGOを使ったブログを作ってみました
なぜHUGO? 　仕事の関係でGoを使いそうになったときに調べ物の途中でHUGOに出会いました
ブログは以前からWordPressを使っていましたがPHPやらMySQLやらで動作がもっさりしていて、OSSやら知名度やらでやたらと攻撃対象となることも多く、サーバーの対策が結構面倒でした
静的サイトは生成してしまえば基本的にはHostingサービスに置いてしまえばいいので運用面でもお手軽です
　もちろん動的サイトもそれなりにいいところはあるのですが、ただのブログにそこまでリソースを裂きたくないのです&amp;hellip;
アナリティクスやコメントなども外部サービスを使えば静的サイトでもできてしまいます
そもそも書くのが面倒くさい WordPressはJetPackプラグインを入れることでMarkDown記法には対応しています
しかし、若干挙動が異なることろが多いので
 VSCodeなどでMarkDownで書く MarkDownで書かれた記事をHTMLで出力 出力されたHTNMLを最適化(idなど不要タグが書かれてしまうのでそれらを除去) WordPressにアップロード  という結局面倒くさいことをしていました
もちろんYなんたら記法で書くこともありますが、テーマの関係でh2タグが見づらいとか結局面倒くさいです
要するに楽したいはずなのに余計めんどくさくなっていました
そもそもブログを書いている理由 割と理由はいくつかありますが、主に備忘録のように記録に残して置きたいと言うのがあります。
サクッと書いてしまいたいわけですが先程のように書くことすらめんどい状態です
なのでHUGOを使えばMarkDownのまま使えますし頑張っていきたいです(もちろん流石にWordPressの方からインポート！とは行きませが)
今後書く予定のもの メインのブログから完全に移行してもいいかもしれませんが、そこそこの記事数があります
しょうもない内容もあるのでメインのブログは残しつつ、さくっと書けるものなどはざっくりメモ書き程度に使い、深める場合はメインにも書くかもしれません(もちろんメインのブログも並行してのんびりやっていこうと思います)
小話 Goの勉強がてらHUGO入れてみたけど使うところとしてはGoの要素がないんですねこれ()</description>
    </item>
    
    <item>
      <title>Hugo をDocker-Composeでビルド、デプロイできるようにする</title>
      <link>https://sublog.zinntikumugai.com/post/2020/03/hugo_build_docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sublog.zinntikumugai.com/post/2020/03/hugo_build_docker-compose/</guid>
      <description>環境構築とかめんどいのでDockerで全部できるようにしてみました
HugoのDocker HugoのDockerイメージはなぜか公式から提供されていません
ローカルでの動作はバイナリを使うべきと言われても実際は
 Hugoを入れるのがめんどい Moduleを使うとなるとGoも入れるとかめんどい なんかめんどい  と、まぁめんどいんですよ(適当)
実際のところ、初期の環境はUbuntu、メイン環境はWindows、持ち歩くのはWindows
どの環境もDockerは入っていますが、近々どのマシンもOSレベルのお掃除を検討しているので今からHugoのみ入れるのも不便です
また、CIとのバージョン対応が今まではtravis.ymlに書き込んでいたのでバージョン差異があるとめんどかったのです
ということでDockerでやりましょ(強引)
HugoのDockerImage peaceirisさんが作成されたモノを使います
https://github.com/peaceiris/hugo-extended-docker
最近のHugoに対応されていますし、Hugoのリリース後その日のうちに対応するとのことです
ファイル修正 https://github.com/zinntikumugai/sublog/commit/5f64259773826502c6c8c3d0b7f7acf822b8ec0c こちらの修正の通りですが多少解説も兼ねて細かく書きます
今回はdocker-composeを使うので以下の通り
version: &amp;#39;3&amp;#39; services: hugo: container_name: hugo image: peaceiris/hugo:v0.67.1 # image: peaceiris/hugo:v0.67.1-mod # Hugo Modules ports: - 1313:1313 volumes: - ${PWD}/src:/src command: - server - --bind=0.0.0.0 - --buildDrafts imageにHugoのバージョンを書いていますがdocker-composeの環境変数にしたほうがいいかもしれない(正確にはymlの環境変数だっけかな)
Hugoで必要なファイル類はsrcディレクトリ以下に配置してください(あくまでも好みですが)
追加で修正が必要なのはHugoのテーマでしょうか
基本的に
- git submodule - zipでDLして配置  のいずれかですが、submoduleを使っていたので.gitmodulesを書き換えています
実際はフォルダ削除とか色々してみましたが、初期pull状態でsubmoduleのpullをしてなかったところsubmoduleを再同期しても動作していなかったので、改めて
rm -rf themes/cleanwhite git submodule add https://github.com/zhaohuabing/hugo-theme-cleanwhite.git src/themes/cleanwhite と実行しました</description>
    </item>
    
  </channel>
</rss>